#!/bin/bash - 
#===============================================================================
#
#          FILE: ind
# 
#         USAGE: ./ind 
# 
#   DESCRIPTION: startuje inotify wait jako daemona
# 
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Marek Płonka (marekpl), marek.plonka@nask.pl
#  ORGANIZATION: NASK
#       CREATED: 03.11.2016 06:50:02
#      REVISION:  ---
#===============================================================================
#===============================================================================
#  GLOBAL DECLARATIONS
#===============================================================================
set -o nounset                              # Treat unset variables as an error
ERR_FUNC=1
ERR_CMD=2
PF='012d'                                       # printf format string
exclude_list="none"
set -o xtrace
#set -o verbose
#===============================================================================
#  FUNCTION DEFINITIONS
#===============================================================================
#---  FUNCTION  ----------------------------------------------------------------
#         NAME:  usage
#  DESCRIPTION:  Display usage information.
#-------------------------------------------------------------------------------
function usage ()
{
	cat <<- EOT

  Usage :  ${0##/*/} [options] [--] 

  Options: 
  -h|help       Display this message
  -d            Dir to watch
  -e            Exclude list
  -b            Backup dir
  -l            Log dir

	EOT
}    # ----------  end of function usage  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  mycd
#   DESCRIPTION:  
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
mycd ()
{
    cd "$1" || {
        echo "Błąd cd $1"
        exit $ERR_FUNC
    }
}    # ----------  end of function mycd  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  mymd
#   DESCRIPTION:  
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
mymd ()
{
    if [ ! -d "$1" ]; then
        mkdir "$1" || {
            echo "Błąd mkdir $1"
            exit $ERR_FUNC
        }
    fi
}    # ----------  end of function mymd  ----------
#===============================================================================
#  MAIN SCRIPT
#===============================================================================
#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------
while getopts ":d:e:b:l:h" opt
do
  case $opt in
    h|help )  usage; exit 0   ;;
    d ) dir_to_watch=${OPTARG} ;;
    e ) exclude_list=${OPTARG} ;;
    b ) backup_dir=${OPTARG} ;;
    l ) log_dir=${OPTARG} ;;
    \? )  echo -e "\n  Option does not exist : $OPTARG\n"
          usage; exit 1   ;;
  esac
done
shift $(($OPTIND-1))
#-------------------------------------------------------------------------------
# 
log_dir="$log_dir/$(basename $0).log"
mymd "$log_dir"
event_log="$log_dir/event_log"                  # zdarzenia
cmd_log="$log_dir/cmd_log"                      # generowane komendy
cp_log="$log_dir/cp.log"                        # rzeczywiście skopiowane pliki
err_log="$log_dir/err.log"                      # błędy (por. $cp_log)
for log in "$event_log" "$cmd_log" "$cp_log" "$err_log"; do
    cmd="cat /dev/null > \"$log\""
    eval "$cmd"
done
inotify_err="$log_dir/notify.err"
rm -fv "$inotify_err"
#------------------------------------------------------------------------------myregexp="^Wideo*|^Szablony*"
exclude=''
[[ "$exclude_list" != "none" ]] && {
    while read line ; do
        exclude+="$line|"
    done < "$exclude_list"
    exclude=${exclude:0:-1}
}

mycd "$dir_to_watch"
inotifywait \
    --monitor \
    --event close_write \
    --recursive \
    --timefmt "%F %T" \
    --format "|%T|%e|%w%f" . 2> "$inotify_err" | \
while read event
do
    echo "$event" >> "$event_log"

    file=$(echo "$event" | awk -F \| '{print $NF'})
    file=${file:2}
    copy=true
    [[ "$file" =~ $exclude ]] && {
        echo "pomijam: $file"
        copy=false
    }
    [[ $copy ]] && {
        cmd="cp --force --preserve=mode,timestamps,links --parents --update --verbose \"$file\" \"$backup_dir\" >> \"$cp_log\" 2>&1"
        echo "$(date +'%F %T')|$cmd" >> "$cmd_log"

        eval "$cmd" || echo "$(date +'%F %T')|$cmd" >> "$err_log"
    }
done

exit 0

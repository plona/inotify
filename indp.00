#!/bin/bash - 
#===============================================================================
#
#          FILE: indp
# 
#         USAGE: ./indp 
# 
#   DESCRIPTION: startuje inotify wait jako daemona via named pipe
# 
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Marek Płonka (marekpl), marek.plonka@nask.pl
#  ORGANIZATION: NASK
#       CREATED: 03.11.2016 06:50:02
#      REVISION:  ---
#===============================================================================
#===============================================================================
#  GLOBAL DECLARATIONS
#===============================================================================
set -o nounset                              # Treat unset variables as an error
ERR_FUNC=2
ERR_SCRIPT=1
#PF='012d'                                       # printf format string
#set -o xtrace
#set -o verbose
#===============================================================================
#  FUNCTION DEFINITIONS
#===============================================================================
#---  FUNCTION  ----------------------------------------------------------------
#         NAME:  usage
#  DESCRIPTION:  Display usage information.
#-------------------------------------------------------------------------------
function usage ()
{
	cat <<- EOT

  Usage :  ${0##/*/} [options] [--] [backup_dir backup_dir ...]

  Options: 
  -h|help       Display this message
  -d            Dir to watch
  -e            Exclude list
  -l            Log dir

	EOT
}    # ----------  end of function usage  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  mycd
#   DESCRIPTION:  
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
mycd ()
{
    cd "$1" || {
        echo "Błąd cd $1"
        exit $ERR_FUNC
    }
}    # ----------  end of function mycd  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  mymd
#   DESCRIPTION:  
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
mymd ()
{
    if [ ! -d "$1" ]; then
        mkdir "$1" || {
            echo "Błąd mkdir $1"
            exit $ERR_FUNC
        }
    fi
}    # ----------  end of function mymd  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  start_watch
#   DESCRIPTION:  
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
start_watch ()
{
    inotifywait \
        --monitor \
        --event close_write \
        --recursive \
        --timefmt "%F %T" \
        --format "|%T|%e|%w%f" . 1> "$inotify_pipe" 2> "$inotify_err"

}    # ----------  end of function start_watch  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  replicate_files
#   DESCRIPTION:  
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
replicate_files ()
{
    while read event
    do
        echo "$event" >> "$event_log"

        file=$(echo "$event" | awk -F \| '{print $NF'})
        file=${file:2}
        copy=true
        [[ "$exclude" ]] && {
            [[ "$file" =~ $exclude ]] && {
                echo "$(date +'%F %T')|pomijam: $file" >> "$exclude_log"
                echo "pominięty" >> "$event_log"
                copy=false
            }
        }
        if $copy; then
            for backup_dir in "${backup_dirs[@]}"; do
                cmd="cp --force --preserve=mode,timestamps,links --parents --update --verbose \"$file\" \"$backup_dir\" >> \"$cp_log\" 2>&1"
                echo "$(date +'%F %T')|$cmd" >> "$cmd_log"
                eval "$cmd" || echo "$(date +'%F %T')|$cmd" >> "$err_log"
            done
        fi
    done < "$inotify_pipe"

}    # ----------  end of function replicate_files  ----------

#===============================================================================
#  MAIN SCRIPT
#===============================================================================
#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------
exclude_list="none"
while getopts ":d:e:l:h" opt
do
  case $opt in
    h|help )  usage; exit 0   ;;
    d ) dir_to_watch=${OPTARG} ;;
    e ) exclude_list=${OPTARG} ;;
    l ) log_dir=${OPTARG} ;;
    \? )  echo -e "\n  Option does not exist : $OPTARG\n"
          usage; exit $ERR_SCRIPT   ;;
  esac
done
shift $(($OPTIND-1))

declare -a backup_dirs
backup_dirs=( "$@" )
no_dir=false
echo "snapsots (${#backup_dirs[@]}):"
for el in "${backup_dirs[@]}"; do
    [[ -d "$el" ]] && {
        echo $el
    } || {
        no_dir=true
        echo "Brak katalogu: \"$el\""
    }
done
[[ $no_dir == true ]] && exit $ERR_SCRIPT
#-------------------------------------------------------------------------------
# pliki logów i pipki
#-------------------------------------------------------------------------------
log_dir="$log_dir/$(basename $0).log"
mymd "$log_dir"
event_log="$log_dir/event.log"                  # zdarzenia
exclude_log="$log_dir/exclude.log"              # wykluczenia
cmd_log="$log_dir/cmd.log"                      # generowane komendy
cp_log="$log_dir/cp.log"                        # rzeczywiście skopiowane pliki
err_log="$log_dir/cp.err"                       # błędy (por. $cp_log)
inotify_err="$log_dir/notify.err"               # błędy inotify
for log in "$event_log" "$exclude_log" "$cmd_log" "$cp_log" "$inotify_err"; do
    cmd="cat /dev/null > \"$log\""
    eval "$cmd"
done

inotify_pipe="/tmp/$(basename $0).pipe"         # pipka do komunikacji notify -> replikacja
o_umask=$(umask)
umask 0066
mknod "$inotify_pipe" p || exit $ERR_SCRIPT
umask $o_umask
#------------------------------------------------------------------------------myregexp="^Wideo*|^Szablony*"
# lista wykluczeń na regexp akceptowane w bash
exclude=''
[[ "$exclude_list" != "none" ]] && {
    while read line ; do
        exclude+="$line|"
    done < "$exclude_list"
    exclude=${exclude:0:-1}
}

mycd "$dir_to_watch"

start_watch &
disown

replicate_files &
disown

sleep 1
ok=true
while read line; do
    echo $line
    [[ $line =~ .*[Ff]ailed.* ]] && ok=false
done < "$inotify_err"

[[ $ok == true ]] && {
    echo "można odpalić sambę"
    echo "PID gdzieś zapisać!"
    echo OK
    exit 0
} || {
    echo "zatrzymać sambę (na wszelki wypadek)"
    echo "Usunąć PID"
    rm -fv "$inotify_pipe"
    echo FAIL
    exit $ERR_SCRIPT
}

exit 0
